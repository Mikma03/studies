.\" Automatically generated by Pandoc 3.1.6.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "pandoc-crossref" "1" "November 2017" "" ""
.hy
.PP
pandoc-crossref is a pandoc filter for numbering figures, equations,
tables and cross-references to them.
.IP \[bu] 2
TOC {:toc}
.SH Caveats
.SS LaTeX output and \f[V]--include-in-header\f[R]
.PP
pandoc-crossref uses metadata variable \f[V]header-includes\f[R] to add
LaTeX definitions to output.
However, Pandoc\[cq]s command line option
\f[V]--include-in-header\f[R]/\f[V]-H\f[R] overrides this variable.
If you need to use \f[V]--include-in-header\f[R], add
pandoc-crossref-specific definitions as well.
See LaTeX customization for more information.
.SS Note on non-standard LaTeX templates
.PP
If you\[cq]re using non-standard pandoc LaTeX template (this includes
the cases where document class is not \f[V]article\f[R] or
\f[V]book\f[R] close enough to that), pandoc-crossref might not be able
to configure that properly.
You might to configure LaTeX in the template manually.
.SS Note on LaTeX and \f[V]chapters\f[R] option
.PP
Because pandoc-crossref offloads all numbering to LaTeX if it can,
\f[V]chapters: true\f[R] has no direct effect on LaTeX output.
You have to specify Pandoc\[cq]s \f[V]--top-level-division=chapter\f[R]
option, which should hopefully configure LaTeX appropriately.
.PP
It\[cq]s a good idea to specify \f[V]--top-level-division=chapter\f[R]
for any output format actually, because pandoc-crossref can\[cq]t signal
pandoc you want to use chapters, and vice versa.
.SS citeproc and pandoc-crossref
.PP
Since pandoc-crossref uses the same citation syntax as citeproc, you
\f[I]have\f[R] to run former \f[I]before\f[R] latter.
For example:
.IP
.nf
\f[C]
pandoc -F pandoc-crossref --citeproc file.md -o file.html
\f[R]
.fi
.SS Note on leading/trailing spaces in metadata options
.PP
Leading and trailing spaces in YAML metadata will most likely be
stripped by either YAML parser or Pandoc itself.
If you need leading and/or trailing spaces in pandoc-crossref metadata
variables, use html entity for space instead, i.e.\ \f[V]&#32;\f[R].
For example, if you want reference ranges to be delimited by a dash with
spaces (e.g.\ \f[V]2 - 5\f[R]), include the following in YAML metadata:
.IP
.nf
\f[C]
rangeDelim: \[aq]&#32;-&#32;\[aq]
\f[R]
.fi
.PP
or pass \f[V]-MrangeDelim=\[aq]&#32;-&#32;\[aq]\f[R] to pandoc on
command line.
.PP
You can use other html entites of course, like \f[V]&nbsp;\f[R] etc.
.SH Syntax
.PP
Syntax is loosely based on discussion in
<https://github.com/jgm/pandoc/issues/813>
.SS Image labels
.IP
.nf
\f[C]
![Caption](file.ext){#fig:label}
\f[R]
.fi
.PP
To label an (implicit) figure, append \f[V]{#fig:label}\f[R] (with
\f[V]label\f[R] being something unique to reference this figure by)
immediately after image definition.
.PP
This only works on implicit figures, i.e.\ an image occurring by itself
in a paragraph (which will be rendered as a figure with caption by
pandoc)
.PP
Image block and label \f[I]can not\f[R] be separated by spaces.
.SS Subfigures
.PP
It\[cq]s possible to group figures as subfigures.
Basic syntax is as follows:
.IP
.nf
\f[C]
<div id=\[dq]fig:figureRef\[dq]>
![subfigure 1 caption](image1.png){#fig:figureRefA}

![subfigure 2 caption](image2.png){#fig:figureRefB}

Caption of figure
</div>
\f[R]
.fi
.PP
To sum up, subfigures are made with a div having a figure \f[V]id\f[R].
Contents of said div consist of several paragraphs.
All but last paragraphs contain one subfigure each, with captions,
images and (optionally) reference attributes.
Last paragraph contains figure caption.
.PP
If you put more than one figure in the paragraph, those will still be
rendered, but Pandoc will omit subfigure caption in most outputs (but it
will work as expected with LaTeX).
You can use output-specific hacks to work around that, or use
\f[V]subfigGrid\f[R] (see below).
.PP
Output is customizable, with metadata fields.
See Customization for more information.
.PP
Default settings will produce the following equivalent Markdown from
example above:
.IP
.nf
\f[C]
<div id=\[dq]fig:figureRef\[dq] class=\[dq]subfigures\[dq]>

![a](image1.png){#fig:figureRefA}

![b](image2.png){#fig:figureRefB}

Figure 1: Caption of figure. a \[em] subfigure 1 caption, b \[em] subfigure 2
caption

</div>
\f[R]
.fi
.PP
References to subfigures will be rendered as
\f[V]figureNumber (subfigureNumber)\f[R], e.g., in this particular
example, \f[V][\[at]fig:figureRefA]\f[R] will produce
\f[V]fig. 1 (a)\f[R].
.PP
You can add \f[V]nocaption\f[R] class to an image to suppress subfigure
caption altogether.
Note that it will still be counted.
.SS Subfigure grid
.PP
If you need to align subfigures in a grid, and using output format
styles is not an option, you can use \f[V]subfigGrid\f[R] option.
That will typeset subfigures inside a table.
.PP
Rows are formed by different paragraphs, with each image in a separate
column.
.PP
Column widths will be taken from \f[V]width\f[R] attributes of
corresponding images, e.g.
.IP
.nf
\f[C]
<div id=\[dq]fig:coolFig\[dq]>
![caption a](coolfiga.png){#fig:cfa width=30%}
![caption b](coolfigb.png){#fig:cfb width=60%}
![caption c](coolfigb.png){#fig:cfc width=10%}

![caption d](coolfigd.png){#fig:cfd}
![caption e](coolfige.png){#fig:cfe}
![caption f](coolfigf.png){#fig:cff}

Cool figure!
</div>
\f[R]
.fi
.PP
will produce a table with columns of 30%, 60% and 10% respectively.
.PP
Only first row of images is considered for table width computation,
other rows are completely ignored.
.PP
\f[I]Anything\f[R] except images is silently ignored.
So any text, spaces, soft line breaks etc will silently disappear from
output.
That doesn\[cq]t apply to caption paragraph, obviously.
.PP
All images will have width attribute automatically set to \f[V]100%\f[R]
in order to fill whole column.
.PP
Specifying width in anything but \f[V]%\f[R] will throw an error.
.PP
If width for some images in first row is not specified, those will span
equally in the remaining space.
.PP
If width isn\[cq]t specified for any image in first row, those will span
equally on 99% of page width (due to Pandoc otherwise omitting width
attribute for table).
.PP
This option is ignored with LaTeX output, but paragraph breaks should
produce similar effect, so images should be typeset correctly.
TL;DR you don\[cq]t need \f[V]subfigGrid\f[R] enabled for it to work
with LaTeX, but you can still enable it.
.SS Equation labels
.IP
.nf
\f[C]
$$ math $$ {#eq:label}
\f[R]
.fi
.PP
To label a display equation, append \f[V]{#eq:label}\f[R] (with
\f[V]label\f[R] being something unique to reference this equation by)
immediately after math block.
.PP
Math block and label \f[I]can\f[R] be separated by one or more spaces.
.PP
You can also number all display equations with \f[V]autoEqnLabels\f[R]
metadata setting (see below).
Note, however, that you won\[cq]t be able to reference equations without
explicit labels.
.PP
Equations numbers will be typeset inside math with \f[V]\[rs]qquad\f[R]
before them.
If you want to use tables instead, use \f[V]tableEqns\f[R] option.
Depending on output format, tables might work better or worse than
\f[V]\[rs]qquad\f[R].
.PP
Alternatively, for formats that support it, you can use arbitrary LaTeX
command accepting a single argument (that is, label text) for
typesetting.
A common example is \f[V]\[rs]tag\f[R].
Use \f[V]equationNumberTeX\f[R] metadata variable for that (set to
\f[V]\[rs]qquad\f[R] by default).
.PP
Beware that \f[V]eqnIndexTemplate\f[R] gets applied first, so you\[cq]ll
likely want to set it to plain index as well.
.PP
For instance, to use \f[V]\[rs]tag\f[R], you would have the following in
your metadata:
.IP
.nf
\f[C]
equationNumberTeX: \[rs]\[rs]tag
eqnIndexTemplate: $$i$$
\f[R]
.fi
.PP
These options don\[cq]t affect LaTeX output (which offloads numbering to
the LaTeX engine).
.PP
For advanced usage, see \f[V]eqnInlineTemplate\f[R],
\f[V]eqnBlockTemplate\f[R].
.SS Table labels
.IP
.nf
\f[C]
a   b   c
--- --- ---
1   2   3
4   5   6

: Caption {#tbl:label}
\f[R]
.fi
.PP
To label a table, append \f[V]{#tbl:label}\f[R] at the end of table
caption (with \f[V]label\f[R] being something unique to reference this
table by).
Caption and label \f[I]must\f[R] be separated by at least one space.
.SS Section labels
.PP
You can also reference sections of any level.
Section labels use native pandoc syntax, but must start with
\[lq]sec:\[rq], e.g.
.IP
.nf
\f[C]
 Section {#sec:section}
\f[R]
.fi
.PP
You can also use \f[V]autoSectionLabels\f[R] variable to automatically
prepend all section labels (automatically generated with pandoc
included) with \[lq]sec:\[rq].
Bear in mind that references can\[cq]t contain periods, commas etc, so
some auto-generated labels will still be unusable.
.PP
WARNING: With LaTeX output, you have to invoke pandoc with
\f[V]--number-sections\f[R], otherwise section labels won\[cq]t work.
It\[cq]s also advised with other output formats, since with no numbers
in section titles, it would be hard to navigate anyway.
.SS Section numbering
.PP
Pandoc doesn\[cq]t properly support numbering sections in some output
formats, and section reference labels (see below).
.PP
You can let pandoc-crossref handle section numbering instead.
This is done via \f[V]numberSections\f[R] and \f[V]sectionsDepth\f[R]
metadata options.
.PP
\f[V]numberSections\f[R] controls if pandoc-crossref handles numbering
sections, while \f[V]sectionsDepth\f[R] controls what sections are
numbered.
.PP
Additionally, with \f[V]numberSections\f[R], if the first heading in
your document is level 2 or more, pandoc-crossref will assume you meant
to have implicit headings with previous levels, and will assign those
phantom implicit headings the index \f[V]1\f[R].
Without \f[V]numberSections\f[R], the behaviour is consistent with
pandoc, that is, missing headings will be assigned the index
\f[V]0\f[R].
.PP
Set \f[V]sectionsDepth\f[R] to \f[V]0\f[R] to make section numbering
consistent with \f[V]chaptersDepth\f[R].
.PP
If \f[V]sectionsDepth\f[R] value is lesser than \f[V]0\f[R], all
sections will be numbered.
.PP
Otherwise, only header levels up to and including
\f[V]sectionsDepth\f[R] will be numbered.
.PP
You can also supply a custom section header template via
\f[V]secHeaderTemplate\f[R] metadata option.
The following variables are supported:
.IP \[bu] 2
\f[V]$$i$$\f[R] \[en] formatted section number, according to
\f[V]sectionsDepth\f[R]
.IP \[bu] 2
\f[V]$$t$$\f[R] \[en] original section header text
.IP \[bu] 2
\f[V]$$n$$\f[R] \[en] 0-indexed section level (0 is the topmost)
.PP
See section on templates for more information
.SS Reference labels
.PP
\f[B]\f[BI]Not currently supported with LaTeX output\f[B]\f[R]
.PP
If you want to reference some object by a pre-defined label instead of
by number, you can specify attribute \f[V]label\f[R], like this:
.IP
.nf
\f[C]
# Section {label=\[dq]Custom Label\[dq]}

![Figure](fig.png){fig:fig1 label=\[dq]Custom label\[dq]}
\f[R]
.fi
.PP
Note that to use this with equations and tables, you need to use fenced
div/span syntax, not the short syntax:
.IP
.nf
\f[C]

:::{#tbl:table label=\[dq]T\[dq]}
a   b   c
--- --- ---
1   2   3
4   5   6

: Caption
:::

[$$y = e\[ha]x$$]{#eq:equation label=\[dq]E\[dq]}
\f[R]
.fi
.PP
This label will be used instead of a number in \f[V]chapters\f[R] output
for sections and when referencing the element directly.
.PP
Note that with \f[V]chapters\f[R] output with depth>1, only the given
section will be referenced by the custom label, e.g.\ with
.IP
.nf
\f[C]
 Chapter 1.

# Section with custom label {#sec:scl label=\[dq]SCL\[dq]}

![](figure.png){#fig:figure}
\f[R]
.fi
.PP
\f[V]\[at]sec:scl\f[R] will translate into \f[V]sec. 1.SCL\f[R], and
\f[V]\[at]fig:figure\f[R] into \f[V]fig. 1.SCL.1\f[R]
.SS Manual numbering adjustment
.PP
\f[B]\f[BI]Not currently supported with LaTeX output\f[B]\f[R]
.PP
For cases when you need to manually adjust numbering, you can specify
the \f[V]number\f[R] attribute on the object.
It will set the internal object counter for the annotated object to the
number specified, and all the following objects of this type will count
from that.
Conceptually, this is similar to document processors\[cq] \[lq]start
from\&...\[rq] etc.
.PP
Same as with \f[V]label\f[R] attributes, to use this with equations and
tables, you need to use fenced div/span syntax, not the short syntax.
.SS Code Block labels
.PP
There are a couple options to add code block labels.
Those work only if code block id starts with \f[V]lst:\f[R],
e.g.\ \f[V]{#lst:label}\f[R]
.SS \f[V]caption\f[R] attribute
.PP
\f[V]caption\f[R] attribute will be treated as code block caption.
If code block has both id and \f[V]caption\f[R] attributes, it will be
treated as numbered code block.
.SS Table-style captions
.PP
Enabled with \f[V]codeBlockCaptions\f[R] metadata option.
If code block is immediately adjacent to paragraph, starting with
\f[V]Listing:\f[R] or \f[V]:\f[R], said paragraph will be treated as
code block caption.
.PP
or
.PP
It also allows to specify label in caption, as do tables, for example:
.SS Wrapping div
.PP
Wrapping code block without label in a div with id \f[V]lst:...\f[R] and
class, starting with \f[V]listing\f[R], and adding paragraph before code
block, but inside div, will treat said paragraph as code block caption.
.PP
Any additional attributes and classes on the wrapping div will be merged
with classes/attributes on the listing itself.
In case of duplicate attributes, the behaviour is unspecified, but
likely either both values will end up in the output, or div attributes
will take precedence.
This is important to keep in mind if you need to do some additional
post-processing.
.SS References
.IP
.nf
\f[C]
[\[at]fig:label1;\[at]fig:label2;...] or [\[at]eq:label1;\[at]eq:label2;...] or [\[at]tbl:label1;\[at]tbl:label2;...] or \[at]fig:label or \[at]eq:label or \[at]tbl:label
\f[R]
.fi
.PP
Reference syntax heavily relies on citation syntax.
Basic reference is created by writing \f[V]\[at]\f[R], then basically
desired label with prefix.
It is also possible to reference a group of objects, by putting them
into brackets with \f[V];\f[R] as separator.
Similar objects will be grouped in order of them appearing in citation
brackets, and sequential reference numbers will be shortened,
e.g.\ \f[V]1,2,3\f[R] will be shortened to \f[V]1-3\f[R].
.PP
You can capitalize first reference character to get capitalized prefix,
e.g.\ \f[V][\[at]Fig:label1]\f[R] will produce \f[V]Fig. ...\f[R] by
default.
Capitalized prefixes are derived automatically by capitalizing first
letter of every word in non-capitalized prefix, unless overridden with
metadata settings.
See Customization for more information.
.SS Linking references
.PP
To make references into hyperlinks to referenced element, enable
\f[V]linkReferences\f[R] metadata option.
This has no effect on LaTeX output, since in this case, hyperlinking
references is handled with \f[V]hyperref\f[R] LaTeX package.
.SS Custom prefix per-reference
.PP
It\[cq]s possible to provide your own prefix per-reference, f.ex.
\f[V][Prefix \[at]reference]\f[R] will replace default prefix
(\f[V]fig.\f[R]/\f[V]sec.\f[R]/etc) with prefix verbatim,
e.g.\ \f[V][Prefix \[at]fig:1]\f[R] will be rendered as
\f[V]Prefix 1\f[R] instead of \f[V]fig. 1\f[R].
.PP
In citation group, citations with the same prefix will be grouped.
So, for example \f[V][A \[at]fig:1; A \[at]fig:2; B \[at]fig:3]\f[R]
will turn into \f[V]A 1, 2, B 3\f[R].
It can be used to an advantage, although it\[cq]s a bit more cumbersome
than it should be, e.g.
\f[V][Appendices \[at]sec:A1; Appendices \[at]sec:A2; Appendices \[at]sec:A3]\f[R]
will turn into \f[V]Appendices \[at]A1-\[at]A3\f[R] (with
\f[V]\[at]A1\f[R] and \f[V]\[at]A3\f[R] being relevant section numbers).
Note that non-contiguous sequences of identical prefixes \f[I]will
not\f[R] be grouped.
.PP
\f[B]\f[BI]Not supported with cleveref LaTeX output.\f[B]\f[R]
.SS Prefix suppression
.PP
Prepending \f[V]-\f[R] before \f[V]\[at]\f[R], like so
\f[V][-\[at]citation]\f[R], will suppress default prefix,
e.g.\ \f[V][-\[at]fig:1]\f[R] will produce just \f[V]1\f[R] (or whatever
number it happens to be) without \f[V]fig.\f[R] prefix.
.PP
In citation group, citations with and without prefixes will be in
different groups.
So \f[V][-\[at]fig:1; \[at]fig:2; -\[at]fig:3]\f[R] will be rendered as
\f[V]1, fig. 2, 3\f[R], so be careful with this feature.
Again, non-contiguous sequences are not grouped together.
.SS Lists
.PP
It\[cq]s possible to use raw latex commands
\f[V]\[rs]listoffigures\f[R], \f[V]\[rs]listoftables\f[R] and
\f[V]\[rs]listoflistings\f[R], which will produce ordered list of
figure/table/listings titles, in order of appearance in document.
.PP
For LaTeX output, \f[V]\[rs]listoflistings\f[R] depends on other
options, and is defined in preamble, so it will work reliably only with
standalone/pdf output.
.PP
\f[B]NOTE:\f[R] With Pandoc 2.0.6 and up, you might have to explicitly
separate these commands if they are close together, at least when
targeting something besides LaTeX.
So this might not work:
.IP
.nf
\f[C]
\[rs]listoffigures

\[rs]listoftables

\[rs]listoflistings
\f[R]
.fi
.PP
but this will:
.IP
.nf
\f[C]
\[rs]listoffigures

<!-- hack to split raw blocks -->

\[rs]listoftables

<!-- hack to split raw blocks -->

\[rs]listoflistings
\f[R]
.fi
.PP
With HTML-compatible output, lists are wrapped into a \f[V]div\f[R] with
classes \f[V]list\f[R] and \f[V]list-of-<prefix>\f[R], where
\f[V]<prefix>\f[R] is either \f[V]fig\f[R], \f[V]tbl\f[R] or
\f[V]lst\f[R] depending on the type of the list.
This allows for ad-hoc style overrides in HTML.
.SH Usage
.PP
Run pandoc with \f[V]--filter\f[R] option, passing path to
pandoc-crossref executable, or simply \f[V]pandoc-crossref\f[R], if
it\[cq]s in PATH:
.PP
\f[V]pandoc --filter pandoc-crossref\f[R]
.PP
If you installed with cabal, it\[cq]s most likely located in
\f[V]$HOME/.cabal/bin\f[R] on *NIX systems,
\f[V]$HOME/Library/Haskell/bin\f[R] on Macs, or in
\f[V]%AppData%\[rs]cabal\[rs]bin\f[R] on Windows.
.SS Customization
.PP
There are several parameters that can be set via YAML metadata (either
by passing \f[V]-M\f[R] to \f[V]pandoc\f[R], or by setting it in source
markdown)
.PP
A list of variables follows.
.SS General options
.IP \[bu] 2
\f[V]cref\f[R]: if True, latex export will use \f[V]\[rs]cref\f[R] from
cleveref package.
Only relevant for LaTeX output.
\f[V]\[rs]usepackage{cleveref}\f[R] will be automatically added to
\f[V]header-includes\f[R].
.IP \[bu] 2
\f[V]chapters\f[R]: if True, number elements as \f[V]chapter.item\f[R],
and restart \f[V]item\f[R] on each first-level heading.
You might also need to run pandoc with
\f[V]--top-level-division=chapter\f[R] argument to signal it you want to
use chapters; whether it\[cq]s actually required or not depends on the
output format, but it\[cq]s always safe to include.
Notice \f[V]chapters\f[R] and related options are ignored in LaTeX
output.
See Note on LaTeX and \f[V]chapters\f[R] option
.IP \[bu] 2
\f[V]chaptersDepth\f[R], default \f[V]1\f[R]: header level to treat as
\[lq]chapter\[rq].
If \f[V]chaptersDepth>1\f[R], then items will be prefixed with several
numbers, corresponding to header numbers, e.g.\ \f[V]fig. 1.4.3\f[R].
.IP \[bu] 2
\f[V]numberSections\f[R], default \f[V]false\f[R]: if True,
pandoc-crossref will prepend section number to section titles (as
counted by pandoc-crossref itself).
This also makes pandoc-crossref assign missing top-level headings the
index of \f[V]1\f[R] instead of \f[V]0\f[R] to avoid ugly
\f[V]sec.     0.0.1\f[R] references.
.IP \[bu] 2
\f[V]sectionsDepth\f[R], default \f[V]0\f[R]:
.RS 2
.IP \[bu] 2
sectionsDepth < 0 \[en] number all sections
.IP \[bu] 2
sectionsDepth == 0 \[en] be consistent with \f[V]chaptersDepths\f[R]
.IP \[bu] 2
sectionsDepth > 0 \[en] number section levels up to and including
\f[V]sectionsDepth\f[R]
.RE
.IP \[bu] 2
\f[V]listings\f[R]: if True, generate code blocks for \f[V]listings\f[R]
package.
Only relevant for LaTeX output.
\f[V]\[rs]usepackage{listings}\f[R] will be automatically added to
\f[V]header-includes\f[R].
You need to specify \f[V]--listings\f[R] option as well.
.IP \[bu] 2
\f[V]codeBlockCaptions\f[R]: if True, parse table-style code block
captions.
.IP \[bu] 2
\f[V]autoSectionLabels\f[R], default \f[V]false\f[R]: Automatically
prefix all section labels with \f[V]sec:\f[R].
Note that this messes with pandoc\[cq]s automatic header references.
.IP \[bu] 2
\f[V]autoEqnLabels\f[R], default \f[V]false\f[R]: Automatically number
all display equations (i.e.\ ones defined using
\f[V]$$...$$\f[R]/\f[V]\[rs][...\[rs]]\f[R]).
Note that you won\[cq]t be able to reference equations without explicit
labels.
.IP \[bu] 2
\f[V]tableEqns\f[R], default \f[V]false\f[R]: Typeset equations and
equation numbers as blocks instead of embedding numbers into equations
themselves.
Depending on output format, this might work better or worse.
See also the section on equation templates.
.IP \[bu] 2
\f[V]setLabelAttribute\f[R], default \f[V]false\f[R]: set
\f[V]label\f[R] attribute on objects to actual number used for
referencing.
This can be useful for post-processing.
.IP \[bu] 2
\f[V]equationNumberTeX\f[R], default \f[V]\[rs]\[rs]qquad\f[R]: use a
LaTeX command for typesetting equation numbers.
Remember that metadata is parsed as Markdown, so you may need to escape
backslashes.
This option doesn\[cq]t affect LaTeX output (which offloads numbering to
the LaTeX engine).
.SS Item title format
.IP \[bu] 2
\f[V]figureTitle\f[R], default \f[V]Figure\f[R]: Word(s) to prepend to
figure titles, e.g.\ \f[V]Figure 1: Description\f[R]
.IP \[bu] 2
\f[V]tableTitle\f[R], default \f[V]Table\f[R]: Word(s) to prepend to
table titles, e.g.\ \f[V]Table 1: Description\f[R]
.IP \[bu] 2
\f[V]listingTitle\f[R], default \f[V]Listing\f[R]: Word(s) to prepend to
listing titles, e.g.\ \f[V]Listing 1: Description\f[R]
.IP \[bu] 2
\f[V]titleDelim\f[R], default \f[V]:\f[R]: What to put between object
number and caption text.
.IP \[bu] 2
\f[V]secHeaderDelim\f[R], default \f[V]\f[R] (i.e.\ space): What to put
between section number and title when \f[V]numberSections\f[R] is
\f[V]true\f[R].
Can be a list, in that case it\[cq]s indexed by heading level, 0-based.
.SS Subfigure-specific
.PP
See Subfigures
.IP \[bu] 2
\f[V]ccsDelim\f[R], default \f[V],&nbsp;\f[R]: delimiter for collected
subfigure captions.
See Subfigures and Templates
.IP \[bu] 2
\f[V]ccsLabelSep\f[R], default \f[V]&nbsp;\[em]&nbsp;\f[R]: delimiter
used between subfigure label and subfigure caption in collected
captions.
See Subfigures and Templates
.IP \[bu] 2
\f[V]subfigGrid\f[R], default \f[V]false\f[R].
If true, typeset subfigures inside a table.
Ignored with LaTeX output.
See Subfigures
.SS List titles
.IP \[bu] 2
\f[V]lofTitle\f[R], default \f[V]# List of Figures\f[R]: Title for list
of figures (lof)
.IP \[bu] 2
\f[V]lotTitle\f[R], default \f[V]# List of Tables\f[R]: Title for list
of tables (lot)
.IP \[bu] 2
\f[V]lolTitle\f[R], default \f[V]# List of Listings\f[R]: Title for list
of listings (lol)
.SS List items
.PP
See also List item templates
.IP \[bu] 2
\f[V]lofItemTitle\f[R], default empty: Title each item in the list of
figures, i.e.\ each item will be prefixed by this string.
.IP \[bu] 2
\f[V]lotItemTitle\f[R], default empty: Title each item in the list of
tables, i.e.\ each item will be prefixed by this string.
.IP \[bu] 2
\f[V]lolItemTitle\f[R], default empty: Title each item in the list of
listings, i.e.\ each item will be prefixed by this string.
.IP \[bu] 2
\f[V]listItemTitleDelim\f[R], default \f[V].\f[R] (str \[lq].\[rq]):
delimiter between list item numbers and captions.
.SS Reference format
.IP \[bu] 2
\f[V]figPrefix\f[R], default \f[V]fig.\f[R], \f[V]figs.\f[R]: Prefix for
references to figures, e.g.\ \f[V]figs. 1-3\f[R]
.IP \[bu] 2
\f[V]eqnPrefix\f[R], default \f[V]eq.\f[R], \f[V]eqns.\f[R]: Prefix for
references to equations, e.g.\ \f[V]eqns. 3,4\f[R]
.IP \[bu] 2
\f[V]tblPrefix\f[R], default \f[V]tbl.\f[R], \f[V]tbls.\f[R]: Prefix for
references to tables, e.g.\ \f[V]tbl. 2\f[R]
.IP \[bu] 2
\f[V]lstPrefix\f[R], default \f[V]lst.\f[R], \f[V]lsts.\f[R]: Prefix for
references to lists, e.g.\ \f[V]lsts. 2,5\f[R]
.IP \[bu] 2
\f[V]secPrefix\f[R], default \f[V]sec.\f[R], \f[V]secs.\f[R]: Prefix for
references to sections, e.g.\ \f[V]secs. 2,5\f[R]
.IP \[bu] 2
\f[V]chapDelim\f[R], default \f[V].\f[R]: Delimiter between chapter
number and item number.
.IP \[bu] 2
\f[V]rangeDelim\f[R], default \f[V]-\f[R]: Delimiter between reference
ranges, e.g.
\f[V]eq. 2-5\f[R]
.IP \[bu] 2
\f[V]pairDelim\f[R], default \f[V],\f[R]: Delimiter between pair of
reference ranges, e.g.\ \f[V]eq. 2-5 <and> 7-9\f[R], or
\f[V]eq. 2 <and> 7\f[R], but \f[V]eq. 2, 4, 6\f[R]
.IP \[bu] 2
\f[V]lastDelim\f[R], default \f[V],\f[R]: Delimiter between
second-to-last and last reference ranges,
e.g.\ \f[V]eq. 2-5, 6-8 <and> 10\f[R].
\f[V]pairDelim\f[R] overrides this for cases of exactly two
references/ranges.
.IP \[bu] 2
\f[V]refDelim\f[R], default \f[V],\f[R]: Delimiter between references,
e.g.
\f[V]eq. 2, 5, 7\f[R] or \f[V]eq. 2-4, 6-8\f[R]
.IP \[bu] 2
\f[V]linkReferences\f[R], default \f[V]false\f[R]: Make references
hyperlinks to the referenced element
.IP \[bu] 2
\f[V]nameInLink\f[R], default \f[V]false\f[R]: For single-element
references, inlcude prefix into hyperlink (when using
\f[V]linkReferences\f[R])
.PP
Note that none of the \f[V]*Delim\f[R] options are honored with cleveref
output.
Use cleveref\[cq]s customization options instead.
.PP
\f[V]figPrefix\f[R], \f[V]eqnPrefix\f[R], \f[V]tblPrefix\f[R],
\f[V]lstPrefix\f[R] can be YAML arrays.
That way, value at index corresponds to total number of references in
group, f.ex.
.IP
.nf
\f[C]
figPrefix:
  - \[dq]fig.\[dq]
  - \[dq]figs.\[dq]
\f[R]
.fi
.PP
Will result in all single-value references prefixed with \[lq]fig.\[rq],
and all reference groups of two and more will be prefixed with
\[lq]figs.\[rq]:
.IP
.nf
\f[C]
[\[at]fig:one] -> fig. 1
[\[at]fig:one; \[at]fig:two] -> figs. 1, 2
[\[at]fig:one; \[at]fig:two; \[at]fig:three] -> figs. 1-3
\f[R]
.fi
.PP
They can be YAML strings as well.
In that case, prefix would be the same regardless of number of
references.
.PP
They can also be used with first character capitalized, i.e.
\f[V]FigPrefix\f[R], etc.
In this case, these settings will override default reference
capitailzation settings.
.SS Custom numbering
.PP
See Custom Numbering Schemes
.IP \[bu] 2
\f[V]figLabels\f[R], default \f[V]arabic\f[R]: the numbering scheme for
figures.
.IP \[bu] 2
\f[V]subfigLabels\f[R], default \f[V]alpha a\f[R]: the numbering scheme
for subfigures.
.IP \[bu] 2
\f[V]eqLabels\f[R], default \f[V]arabic\f[R]: the numbering scheme for
equations.
.IP \[bu] 2
\f[V]tblLabels\f[R], default \f[V]arabic\f[R]: the numbering scheme for
tables.
.IP \[bu] 2
\f[V]lstLabels\f[R], default \f[V]arabic\f[R]: the numbering scheme for
listings.
.IP \[bu] 2
\f[V]secLabels\f[R], default \f[V]arabic\f[R]: the numbering scheme for
sections.
.IP \[bu] 2
\f[V]secLevelLabels\f[R], default unset: the numbering scheme for
sections, YAML array, indexed by heading level; will override
\f[V]secLabels\f[R] if set.
.SS Item title templates
.PP
See Templates
.IP \[bu] 2
\f[V]figureTemplate\f[R], default
\f[V]$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$\f[R]: template for figure
captions
.IP \[bu] 2
\f[V]tableTemplate\f[R], default
\f[V]$$tableTitle$$ $$i$$$$titleDelim$$ $$t$$\f[R]: template for table
captions
.IP \[bu] 2
\f[V]listingTemplate\f[R], default
\f[V]$$listingTitle$$ $$i$$$$titleDelim$$ $$t$$\f[R]: template for
listing captions
.IP \[bu] 2
\f[V]secHeaderTemplate\f[R], default
\f[V]$$i$$$$secHeaderDelim[n]$$$$t$$\f[R]: template for section header
text when \f[V]numberSections\f[R] is \f[V]true\f[R]
.SS Subfigure templates
.PP
See Subfigures
.IP \[bu] 2
\f[V]subfigureTemplate\f[R], default
\f[V]$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$. $$ccs$$\f[R]: template
for subfigure divs captions.
.IP \[bu] 2
\f[V]subfigureChildTemplate\f[R], default \f[V]$$i$$\f[R]: template for
actual subfigure captions.
.IP \[bu] 2
\f[V]ccsTemplate\f[R], default \f[V]$$i$$$$ccsLabelSep$$$$t$$\f[R]:
template for collected subfigure captions.
.SS Equation templates
.IP \[bu] 2
\f[V]eqnIndexTemplate\f[R], default \f[V]($$i$$)\f[R]: used to adjust
how equation index is rendered.
This is required due to it being rendered inside a math block.
Note that for the same reason formatting is mostly ignored.
.IP \[bu] 2
\f[V]eqnInlineTemplate\f[R], default
\f[V]$$e$$$$equationNumberTeX$${$$i$$}\f[R]
.RS 2
.PP
A template to typeset math when \f[V]tableEqns\f[R] is \f[V]false\f[R].
Similar to \f[V]eqnIndexTemplate\f[R], formatting is mostly ignored, due
to it being typeset inside a display math environment.
However, most LaTeX should work (but backslashes need to be doubled).
The following template variables are known:
.IP \[bu] 2
\f[V]ri\f[R], \[lq]raw\[rq] index, before applying
\f[V]eqnIndexTemplate\f[R]
.IP \[bu] 2
\f[V]i\f[R], index after applying \f[V]eqnIndexTemplate\f[R]
.IP \[bu] 2
\f[V]e\f[R], the equation itself
.PP
\f[V]eqnInlineTemplate\f[R] is ignored if \f[V]tableEqns\f[R] is
\f[V]true\f[R].
.RE
.IP \[bu] 2
\f[V]eqnBlockTemplate\f[R], default
.RS 2
.IP
.nf
\f[C]
+:--------------------------------------------------------------:+-----:+
| $$t$$                                                          | \[ga]\[ga]\[ga]{=openxml}
|                                                                | <w:tcPr><w:vAlign w:val=\[dq]center\[dq]/></w:tcPr>
|                                                                | \[ga]\[ga]\[ga]
|                                                                | $$i$$
+----------------------------------------------------------------+-----+
\f[R]
.fi
.PP
When used with \f[V]tableEqns\f[R], a block to use to format equations.
A table by default, but could be literally any block.
\f[V]$$t$$\f[R] stands in for the equation itself, and \f[V]$$i$$\f[R]
stands in for the equation number.
.PP
Note that the default contains a raw block to fix vertical alignment in
docx output.
If you\[cq]re not targeting docx, it will be ignored by pandoc.
.PP
\f[V]eqnBlockTemplate\f[R] is ignored if \f[V]tableEqns\f[R] is
\f[V]false\f[R] (the default).
.RE
.IP \[bu] 2
\f[V]eqnBlockInlineMath\f[R], default \f[V]False\f[R]: if you need to
use inline math while rendering equation block template.
Useful, e.g., if you\[cq]re using raw ooxml and tabstops to align
equations in docx.
For example,
.RS 2
.IP
.nf
\f[C]
tableEqns: true
eqnBlockTemplate: |
   \[ga]<w:pPr><w:tabs><w:tab w:val=\[dq]center\[dq] w:leader=\[dq]none\[dq] w:pos=\[dq]4680\[dq] /><w:tab w:val=\[dq]right\[dq] w:leader=\[dq]none\[dq] w:pos=\[dq]9360\[dq] /></w:tabs></w:pPr><w:r><w:tab /></w:r>\[ga]{=openxml} $$t$$ \[ga]<w:r><w:tab /></w:r>\[ga]{=openxml} $$i$$
eqnBlockInlineMath: true
\f[R]
.fi
.PP
(tweak \f[V]w:pos\f[R] for the two tabstops to taste, the unit is 1/20th
of an inch, sample values are appropriate for portrait A4 with 1-inch
margins)
.RE
.SS Reference templates
.PP
See Templates
.IP \[bu] 2
\f[V]figPrefixTemplate\f[R], default \f[V]$$p$$&nbsp;$$i$$\f[R] \[en]
figure reference template
.IP \[bu] 2
\f[V]eqnPrefixTemplate\f[R], default \f[V]$$p$$&nbsp;$$i$$\f[R] \[en]
equation reference template
.IP \[bu] 2
\f[V]tblPrefixTemplate\f[R], default \f[V]$$p$$&nbsp;$$i$$\f[R] \[en]
table reference template
.IP \[bu] 2
\f[V]lstPrefixTemplate\f[R], default \f[V]$$p$$&nbsp;$$i$$\f[R] \[en]
listing reference template
.IP \[bu] 2
\f[V]secPrefixTemplate\f[R], default \f[V]$$p$$&nbsp;$$i$$\f[R] \[en]
section reference template
.IP \[bu] 2
\f[V]refIndexTemplate\f[R], default \f[V]$$i$$$$suf$$\f[R] \[en]
individual reference index template
.IP \[bu] 2
\f[V]subfigureRefIndexTemplate\f[R], default
\f[V]$$i$$$$suf$$ ($$s$$)\f[R] \[en] subfigure reference index template
.SS List item templates
.PP
See Templates
.IP \[bu] 2
\f[V]lofItemTemplate\f[R], default
\f[V]$$lofItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$\[rs]\[rs]\[rs]n\f[R]
\[en] list-of-figures item template
.IP \[bu] 2
\f[V]lotItemTemplate\f[R], default
\f[V]$$lotItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$\[rs]\[rs]\[rs]n\f[R])
.IP \[bu] 2
\f[V]lolItemTemplate\f[R], default
\f[V]$$lolItemTitle$$$$i$$$$listItemTitleDelim$$ $$t$$\[rs]\[rs]\[rs]n\f[R])
.PP
Special handling is enabled for templates that are either ordered or
bullet lists: items will be merged into a single list.
Thus, for example, given
.IP
.nf
\f[C]
lofItemTemplate: |
  1. $$t$$
\f[R]
.fi
.PP
the list of figures will be formatted as
.IP
.nf
\f[C]
# List of Figures

::: {.list .list-of-fig}
1.  Figure 1 caption
2.  Figure 2 caption
3.  Figure 3 caption
4.  ...
:::
\f[R]
.fi
.SS LaTeX customization
.PP
Support for above variables with LaTeX/PDF output is limited.
In particular, the following variables are honored:
.IP \[bu] 2
\f[V]figureTitle\f[R]
.IP \[bu] 2
\f[V]tableTitle\f[R]
.IP \[bu] 2
\f[V]listingTitle\f[R]
.IP \[bu] 2
\f[V]lofTitle\f[R] \[en] ignores formatting
.IP \[bu] 2
\f[V]lotTitle\f[R] \[en] ignores formatting
.IP \[bu] 2
\f[V]lolTitle\f[R] \[en] ignores formatting
.IP \[bu] 2
\f[V]*Prefix\f[R], upper-/lowercase and single/plural form.
Note that with cleveref output, if \f[V]*Prefix\f[R] is array, only
first two items are used, and the rest is ignored.
.PP
Templates are \f[I]not\f[R] supported.
.PP
You can add arbitrary LaTeX commands to document header, however, using
\f[V]header-includes\f[R] metadata field.
Please bear in mind, that pandoc-crossref up to and including 0.1.2.1
requires \f[V]header-includes\f[R] to be YAML array, e.g.
.IP
.nf
\f[C]
header-includes:
    - \[dq]\[rs]\[rs]newcommand{\[rs]\[rs]pcdoc}{Pandoc-crossref documentation}\[dq]
\f[R]
.fi
.PP
This will be added \f[I]before\f[R] any customization applied by
pandoc-crossref.
For a complete list of what is added to template, consult
ModifyMeta.hs (https://github.com/lierdakil/pandoc-crossref/blob/master/lib/Text/Pandoc/CrossRef/Util/ModifyMeta.hs).
.SS Templates
.PP
pandoc-crossref supports advanced caption customization via caption
templates.
Templates are specified as YAML metadata variables (see Customization),
and are parsed as default Pandoc Markdown.
Variables are specified with display math syntax, i.e.
\f[V]$$var$$\f[R] in a template will be replaced with value of variable
\f[V]var\f[R].
Variables can be specified in YAML metadata block, or from command line
(with \f[V]-M\f[R] switch).
There are two special variables, that are set internally:
.IP \[bu] 2
\f[V]i\f[R] \[en] object number, possibly with chapter number (if
\f[V]chapter=True\f[R])
.IP \[bu] 2
\f[V]t\f[R] \[en] object caption, as given in source Markdown
.PP
Also there is a number of specific variables that are meaningful only in
certain contexts:
.IP \[bu] 2
\f[V]ccs\f[R] \[en] collected subfigure captions.
Only applicable to \f[V]subfigureTemplate\f[R].
Collected captions will be separated by \f[V]ccsDelim\f[R] and
individual captions will be printed with \f[V]ccsTemplate\f[R].
See Subfigures
.IP \[bu] 2
\f[V]suf\f[R] \[en] reference suffix, applicable to
\f[V]refIndexTemplate\f[R], \f[V]subfigureRefIndexTemplate\f[R]
.IP \[bu] 2
\f[V]s\f[R] \[en] subfigure index, applicable to
\f[V]subfigureRefIndexTemplate\f[R]
.PP
\f[V]xPrefixTemplate\f[R], where \f[V]x\f[R] is \f[V]fig\f[R],
\f[V]eqn\f[R], etc, are a special case.
Those don\[cq]t have \f[V]t\f[R] variable, since there is no caption in
source markdown, but instead have \f[V]p\f[R] variable, that binds to
relevant \f[V]xPrefix\f[R].
This is done this way, since actual prefix value can depend on
\f[V]i\f[R].
In \f[V]xPrefixTemplate\f[R], \f[V]i\f[R] references formatted object
numbers, i.e.\ if given a list of references like
\f[V][\[at]fig:1; \[at]fig:2; \[at]fig:3]\f[R], here \f[V]i\f[R] will
contain something like \f[V]1-3\f[R].
.PP
\f[V]refIndexTemplate\f[R] is the template for the individual reference
index.
It can be either a plain template, or can be a YAML object with keys
corresponding to different prefixes, and a special key \f[V]default\f[R]
used as a fallback, e.g.
.IP
.nf
\f[C]
refIndexTemplate:
  sec: $$i$$$$suf$$ ($$t$$)
  default: $$i$$$$suf$$
\f[R]
.fi
.PP
\f[V]refIndexTemplate\f[R] has the following internal variables defined:
.IP \[bu] 2
\f[V]i\f[R] \[en] formatted object index (possibly with chapter number)
.IP \[bu] 2
\f[V]suf\f[R] \[en] literal suffix used in the reference, e.g.\ given
\f[V][\[at]fig:1 some suffix]\f[R], \f[V]suf\f[R] will contain literally
\f[V]some suffix\f[R] (complete with the leading space)
.IP \[bu] 2
\f[V]t\f[R] \[en] object title, if any, or empty if the object has no
title
.PP
\f[V]subfigureRefIndexTemplate\f[R] is roughly the same as
\f[V]refIndexTemplate\f[R] but is used specifically for subfigures.
It additionally has \f[V]s\f[R] variable defined, which is described
above.
.PP
Additionally, a special syntax is provided for indexed access to array
metadata variables: \f[V]arrayVariable[indexVariable]\f[R], where
\f[V]arrayVariable\f[R] is an array-like metadata variable, and
\f[V]indexVariable\f[R] is an integer-typed template variable.
If \f[V]indexVariable\f[R] is larger than length of
\f[V]arrayVariable\f[R], then the last element in
\f[V]arrayVariable\f[R] is used.
.PP
Indexed access can be useful with \f[V]secHeaderTemplate\f[R] for
example, where you might want to add a custom prefix depending on the
header level.
.PP
For example, with this YAML metadata:
.IP
.nf
\f[C]
secHeaderTemplate: $$secHeaderPrefix[n]$$$$i$$. $$t$$
secHeaderPrefix:
  - \[dq]Chapter&#32;\[dq]
  - \[dq]Section&#32;\[dq]
  - \[dq]\[dq]
sectionsDepth: -1
numberSections: true
\f[R]
.fi
.PP
top-level sections will be prefixed with \f[V]Chapter\f[R], second-level
sections will be prefixed with \f[V]Section\f[R] and the rest won\[cq]t
be prefixed with anything.
.PP
Please note that at the moment, templates are not supported with
LaTeX/PDF output.
.SS Custom Numbering Schemes
.PP
It\[cq]s possible to use other numbering schemes apart from arabic.
This is controlled by several metadata options, consult Customization
for a list.
Possible values are:
.IP \[bu] 2
\f[V]arabic\f[R] \[en] arabic numbers (1, 2, 3 \&...)
.IP \[bu] 2
\f[V]roman\f[R] \[en] roman numbers (I, II, III, IV, \&...)
.IP \[bu] 2
\f[V]lowercase roman\f[R] \[en] lowercase roman numbers (i, ii, iii, iv,
\&...)
.IP \[bu] 2
\f[V]alpha x\f[R], where \f[V]x\f[R] is first letter to start from.
This will work for any letter, but will use UTF-8 codepage to determine
what\[cq]s next, so using something strange is not advised.
For example, you can safely use \f[V]alpha a\f[R] to get lowercase latin
letters for 26 figures.
After that, it will get weird (since basic latin alphabet has 26
letters).
Specifically, it will go into characters space (\f[V]{\f[R],
\f[V]|\f[R], \f[V]}\f[R], etc).
You can consult
http://www.fileformat.info/info/unicode/block/basic_latin/utf8test.htm
for general idea on letter progression.
.IP \[bu] 2
list of strings.
You can define a YAML array for numbers.
Mapping is 1:1.
For example, \f[V]figLabels: [α, β, γ, δ, ε]\f[R] will give first object
label `α', second \[en] `β', etc, up until the fifths.
.RS 2
.PP
Note that it will repeat last item in list indefinitely if there are
more references than items in list, i.e.\ in the example above, sixths
object and all after that will also have label `ε'.
.RE
.SS Settings file
.PP
It is also possible to set variables used by pandoc-crossref with a
separate YAML file.
If a given variable is not set in metadata, then pandoc-crossref will
attempt to read it from file specified by \f[V]crossrefYaml\f[R]
metadata variable, or, if not set, from \f[V]pandoc-crossref.yaml\f[R]
from current working directory.
This allows for reusable configurations.
One possible application is ad-hoc internationalization.
.PP
For example, consider \f[V]$HOME/misc/pandoc-crossref-es.yaml\f[R]:
.IP
.nf
\f[C]
figureTitle: \[dq]Figura\[dq]
tableTitle: \[dq]Tabla\[dq]
figPrefix: \[dq]fig.\[dq]
eqnPrefix: \[dq]ec.\[dq]
tblPrefix: \[dq]tbl.\[dq]
loftitle: \[dq]# Lista de figuras\[dq]
lotTitle: \[dq]# Lista de tablas\[dq]
\f[R]
.fi
.PP
pandoc-crossref will send this data to pandoc wrapped in lines of
\f[V]---\f[R].
The YAML file\[cq]s first line should specify a variable; it will not
pass the variables if it is \f[V]---\f[R] or a blank line.
.PP
One could use this with pandoc-crossref as follows:
.PP
\f[V]pandoc -F pandoc-crossref.hs -M \[dq]crossrefYaml=$HOME/misc/pandoc-crossref-es.yaml\[dq]\f[R]
.PP
You can also use global configuration files, which are expected in
\f[V]$HOME/.pandoc-crossref/config.yaml\f[R] and
\f[V]$HOME/.pandoc-crossref/config-$FORMAT.yaml\f[R], where
\f[V]$FORMAT\f[R] is output format, f.ex.
\f[V]latex\f[R] or \f[V]epub\f[R].
On Windows, \f[V]$HOME\f[R] in general resolves to user\[cq]s root
directory, e.g.\ \f[V]C:\[rs]Users\[rs]username\[rs]\f[R].
.PP
Priorities are as follows (from highest to lowest):
.IP \[bu] 2
document metadata
.IP \[bu] 2
\f[V]crossrefYaml\f[R]/\f[V]$CWD/pandoc-crossref.yaml\f[R]
.IP \[bu] 2
\f[V]$HOME/.pandoc-crossref/config-$FORMAT.yaml\f[R]
.IP \[bu] 2
\f[V]$HOME/.pandoc-crossref/config.yaml\f[R]
.SH License
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.
.PP
This program includes code from roman-numerals library, covered by the
following terms:
.RS
.PP
Copyright 2009\[en]2014 Roel van Dijk
.PP
All rights reserved.
.PP
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:
.IP
.nf
\f[C]
* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials provided
  with the distribution.

* The names of contributors may not be used to endorse or promote
  products derived from this software without specific prior
  written permission.
\f[R]
.fi
.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\[lq]AS IS\[rq] AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
.RE
.SH AUTHORS
Nikolay Yakimov.
